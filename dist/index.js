"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enableApiCoverage = void 0;
var _expressListEndpoints = _interopRequireDefault(require("express-list-endpoints"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var END_POINTS_API_ROUTE = '_specmatic/endpoints';
var enableApiCoverage = function enableApiCoverage(expressApp) {
  if (process.env.NODE_ENV !== 'test') return;
  process.env['endpointsAPI'] = END_POINTS_API_ROUTE;
  addEndPointsRoute(expressApp);
  console.log("Endpoints API registered at ".concat(END_POINTS_API_ROUTE));
};
exports.enableApiCoverage = enableApiCoverage;
var listEndPoints = function listEndPoints(expressApp) {
  var details = (0, _expressListEndpoints["default"])(expressApp);
  var endPoints = {};
  details.map(function (apiDetail) {
    endPoints[apiDetail.path] = apiDetail.methods;
  });
  delete endPoints["/".concat(END_POINTS_API_ROUTE)];
  delete endPoints['*'];
  return endPoints;
};
var addEndPointsRoute = function addEndPointsRoute(expressApp) {
  expressApp.get("/".concat(END_POINTS_API_ROUTE), function (_req, res) {
    var endPoints = listEndPoints(expressApp);
    var springActuatorPayload = {
      contexts: {
        application: {
          mappings: {
            dispatcherServlets: {
              dispatcherServlet: []
            }
          }
        }
      }
    };
    Object.keys(endPoints).sort().map(function (path) {
      springActuatorPayload.contexts.application.mappings.dispatcherServlets.dispatcherServlet.push({
        details: {
          requestMappingConditions: {
            methods: endPoints[path].sort(),
            patterns: [path]
          }
        }
      });
    });
    res.send(springActuatorPayload);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzc0xpc3RFbmRwb2ludHMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJFTkRfUE9JTlRTX0FQSV9ST1VURSIsImVuYWJsZUFwaUNvdmVyYWdlIiwiZXhwcmVzc0FwcCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImFkZEVuZFBvaW50c1JvdXRlIiwiY29uc29sZSIsImxvZyIsImNvbmNhdCIsImV4cG9ydHMiLCJsaXN0RW5kUG9pbnRzIiwiZGV0YWlscyIsImxpc3RFeHByZXNzRW5kcG9pbnRzIiwiZW5kUG9pbnRzIiwibWFwIiwiYXBpRGV0YWlsIiwicGF0aCIsIm1ldGhvZHMiLCJnZXQiLCJfcmVxIiwicmVzIiwic3ByaW5nQWN0dWF0b3JQYXlsb2FkIiwiY29udGV4dHMiLCJhcHBsaWNhdGlvbiIsIm1hcHBpbmdzIiwiZGlzcGF0Y2hlclNlcnZsZXRzIiwiZGlzcGF0Y2hlclNlcnZsZXQiLCJPYmplY3QiLCJrZXlzIiwic29ydCIsInB1c2giLCJyZXF1ZXN0TWFwcGluZ0NvbmRpdGlvbnMiLCJwYXR0ZXJucyIsInNlbmQiXSwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxpc3RFeHByZXNzRW5kcG9pbnRzIGZyb20gJ2V4cHJlc3MtbGlzdC1lbmRwb2ludHMnO1xuY29uc3QgRU5EX1BPSU5UU19BUElfUk9VVEUgPSAnX3NwZWNtYXRpYy9lbmRwb2ludHMnO1xuXG5leHBvcnQgY29uc3QgZW5hYmxlQXBpQ292ZXJhZ2UgPSAoZXhwcmVzc0FwcDogYW55KSA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcpIHJldHVybjtcbiAgICBwcm9jZXNzLmVudlsnZW5kcG9pbnRzQVBJJ10gPSBFTkRfUE9JTlRTX0FQSV9ST1VURTtcbiAgICBhZGRFbmRQb2ludHNSb3V0ZShleHByZXNzQXBwKTtcbiAgICBjb25zb2xlLmxvZyhgRW5kcG9pbnRzIEFQSSByZWdpc3RlcmVkIGF0ICR7RU5EX1BPSU5UU19BUElfUk9VVEV9YCk7XG59O1xuXG5jb25zdCBsaXN0RW5kUG9pbnRzID0gKGV4cHJlc3NBcHA6IGFueSk6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nW10gfSA9PiB7XG4gICAgY29uc3QgZGV0YWlscyA9IGxpc3RFeHByZXNzRW5kcG9pbnRzKGV4cHJlc3NBcHApO1xuICAgIGxldCBlbmRQb2ludHM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nW10gfSA9IHt9O1xuICAgIGRldGFpbHMubWFwKGFwaURldGFpbCA9PiB7XG4gICAgICAgIGVuZFBvaW50c1thcGlEZXRhaWwucGF0aF0gPSBhcGlEZXRhaWwubWV0aG9kcztcbiAgICB9KTtcbiAgICBkZWxldGUgZW5kUG9pbnRzW2AvJHtFTkRfUE9JTlRTX0FQSV9ST1VURX1gXTtcbiAgICBkZWxldGUgZW5kUG9pbnRzWycqJ107XG4gICAgcmV0dXJuIGVuZFBvaW50cztcbn07XG5cbmNvbnN0IGFkZEVuZFBvaW50c1JvdXRlID0gKGV4cHJlc3NBcHA6IGFueSkgPT4ge1xuICAgIGV4cHJlc3NBcHAuZ2V0KGAvJHtFTkRfUE9JTlRTX0FQSV9ST1VURX1gLCAoX3JlcTogYW55LCByZXM6IGFueSkgPT4ge1xuICAgICAgICBsZXQgZW5kUG9pbnRzID0gbGlzdEVuZFBvaW50cyhleHByZXNzQXBwKTtcbiAgICAgICAgbGV0IHNwcmluZ0FjdHVhdG9yUGF5bG9hZCA9IHtcbiAgICAgICAgICAgIGNvbnRleHRzOiB7XG4gICAgICAgICAgICAgICAgYXBwbGljYXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgbWFwcGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoZXJTZXJ2bGV0czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoZXJTZXJ2bGV0OiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5rZXlzKGVuZFBvaW50cylcbiAgICAgICAgICAgIC5zb3J0KClcbiAgICAgICAgICAgIC5tYXAocGF0aCA9PiB7XG4gICAgICAgICAgICAgICAgc3ByaW5nQWN0dWF0b3JQYXlsb2FkLmNvbnRleHRzLmFwcGxpY2F0aW9uLm1hcHBpbmdzLmRpc3BhdGNoZXJTZXJ2bGV0cy5kaXNwYXRjaGVyU2VydmxldC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE1hcHBpbmdDb25kaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kczogZW5kUG9pbnRzW3BhdGhdLnNvcnQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuczogW3BhdGhdLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9IGFzIG5ldmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICByZXMuc2VuZChzcHJpbmdBY3R1YXRvclBheWxvYWQpO1xuICAgIH0pO1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEscUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUEwRCxTQUFBRCx1QkFBQUUsR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLGdCQUFBQSxHQUFBO0FBQzFELElBQU1FLG9CQUFvQixHQUFHLHNCQUFzQjtBQUU1QyxJQUFNQyxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQWlCQSxDQUFJQyxVQUFlLEVBQUs7RUFDbEQsSUFBSUMsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFFBQVEsS0FBSyxNQUFNLEVBQUU7RUFDckNGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHSixvQkFBb0I7RUFDbERNLGlCQUFpQixDQUFDSixVQUFVLENBQUM7RUFDN0JLLE9BQU8sQ0FBQ0MsR0FBRyxnQ0FBQUMsTUFBQSxDQUFnQ1Qsb0JBQW9CLENBQUUsQ0FBQztBQUN0RSxDQUFDO0FBQUNVLE9BQUEsQ0FBQVQsaUJBQUEsR0FBQUEsaUJBQUE7QUFFRixJQUFNVSxhQUFhLEdBQUcsU0FBaEJBLGFBQWFBLENBQUlULFVBQWUsRUFBa0M7RUFDcEUsSUFBTVUsT0FBTyxHQUFHLElBQUFDLGdDQUFvQixFQUFDWCxVQUFVLENBQUM7RUFDaEQsSUFBSVksU0FBc0MsR0FBRyxDQUFDLENBQUM7RUFDL0NGLE9BQU8sQ0FBQ0csR0FBRyxDQUFDLFVBQUFDLFNBQVMsRUFBSTtJQUNyQkYsU0FBUyxDQUFDRSxTQUFTLENBQUNDLElBQUksQ0FBQyxHQUFHRCxTQUFTLENBQUNFLE9BQU87RUFDakQsQ0FBQyxDQUFDO0VBQ0YsT0FBT0osU0FBUyxLQUFBTCxNQUFBLENBQUtULG9CQUFvQixFQUFHO0VBQzVDLE9BQU9jLFNBQVMsQ0FBQyxHQUFHLENBQUM7RUFDckIsT0FBT0EsU0FBUztBQUNwQixDQUFDO0FBRUQsSUFBTVIsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFpQkEsQ0FBSUosVUFBZSxFQUFLO0VBQzNDQSxVQUFVLENBQUNpQixHQUFHLEtBQUFWLE1BQUEsQ0FBS1Qsb0JBQW9CLEdBQUksVUFBQ29CLElBQVMsRUFBRUMsR0FBUSxFQUFLO0lBQ2hFLElBQUlQLFNBQVMsR0FBR0gsYUFBYSxDQUFDVCxVQUFVLENBQUM7SUFDekMsSUFBSW9CLHFCQUFxQixHQUFHO01BQ3hCQyxRQUFRLEVBQUU7UUFDTkMsV0FBVyxFQUFFO1VBQ1RDLFFBQVEsRUFBRTtZQUNOQyxrQkFBa0IsRUFBRTtjQUNoQkMsaUJBQWlCLEVBQUU7WUFDdkI7VUFDSjtRQUNKO01BQ0o7SUFDSixDQUFDO0lBQ0RDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDZixTQUFTLENBQUMsQ0FDakJnQixJQUFJLENBQUMsQ0FBQyxDQUNOZixHQUFHLENBQUMsVUFBQUUsSUFBSSxFQUFJO01BQ1RLLHFCQUFxQixDQUFDQyxRQUFRLENBQUNDLFdBQVcsQ0FBQ0MsUUFBUSxDQUFDQyxrQkFBa0IsQ0FBQ0MsaUJBQWlCLENBQUNJLElBQUksQ0FBQztRQUMxRm5CLE9BQU8sRUFBRTtVQUNMb0Isd0JBQXdCLEVBQUU7WUFDdEJkLE9BQU8sRUFBRUosU0FBUyxDQUFDRyxJQUFJLENBQUMsQ0FBQ2EsSUFBSSxDQUFDLENBQUM7WUFDL0JHLFFBQVEsRUFBRSxDQUFDaEIsSUFBSTtVQUNuQjtRQUNKO01BQ0osQ0FBVSxDQUFDO0lBQ2YsQ0FBQyxDQUFDO0lBQ05JLEdBQUcsQ0FBQ2EsSUFBSSxDQUFDWixxQkFBcUIsQ0FBQztFQUNuQyxDQUFDLENBQUM7QUFDTixDQUFDIn0=