"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enableApiCoverage = void 0;
var _expressListEndpoints = _interopRequireDefault(require("express-list-endpoints"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var END_POINTS_API_ROUTE = '_specmatic/endpoints';
var enableApiCoverage = function enableApiCoverage(expressApp) {
  process.env['endpointsAPI'] = END_POINTS_API_ROUTE;
  addEndPointsRoute(expressApp);
  console.log("Endpoints API registered at ".concat(END_POINTS_API_ROUTE));
};
exports.enableApiCoverage = enableApiCoverage;
var listEndPoints = function listEndPoints(expressApp) {
  var details = (0, _expressListEndpoints["default"])(expressApp);
  var endPoints = {};
  details.map(function (apiDetail) {
    endPoints[apiDetail.path] = apiDetail.methods;
  });
  delete endPoints["/".concat(END_POINTS_API_ROUTE)];
  return endPoints;
};
var addEndPointsRoute = function addEndPointsRoute(expressApp) {
  expressApp.get("/".concat(END_POINTS_API_ROUTE), function (_req, res) {
    var endPoints = listEndPoints(expressApp);
    var springActuatorPayload = {
      contexts: {
        application: {
          mappings: {
            dispatcherServlets: {
              dispatcherServlet: []
            }
          }
        }
      }
    };
    Object.keys(endPoints).sort().map(function (path) {
      springActuatorPayload.contexts.application.mappings.dispatcherServlets.dispatcherServlet.push({
        details: {
          requestMappingConditions: {
            methods: endPoints[path].sort(),
            patterns: [path]
          }
        }
      });
    });
    res.send(springActuatorPayload);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzc0xpc3RFbmRwb2ludHMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJFTkRfUE9JTlRTX0FQSV9ST1VURSIsImVuYWJsZUFwaUNvdmVyYWdlIiwiZXhwcmVzc0FwcCIsInByb2Nlc3MiLCJlbnYiLCJhZGRFbmRQb2ludHNSb3V0ZSIsImNvbnNvbGUiLCJsb2ciLCJjb25jYXQiLCJleHBvcnRzIiwibGlzdEVuZFBvaW50cyIsImRldGFpbHMiLCJsaXN0RXhwcmVzc0VuZHBvaW50cyIsImVuZFBvaW50cyIsIm1hcCIsImFwaURldGFpbCIsInBhdGgiLCJtZXRob2RzIiwiZ2V0IiwiX3JlcSIsInJlcyIsInNwcmluZ0FjdHVhdG9yUGF5bG9hZCIsImNvbnRleHRzIiwiYXBwbGljYXRpb24iLCJtYXBwaW5ncyIsImRpc3BhdGNoZXJTZXJ2bGV0cyIsImRpc3BhdGNoZXJTZXJ2bGV0IiwiT2JqZWN0Iiwia2V5cyIsInNvcnQiLCJwdXNoIiwicmVxdWVzdE1hcHBpbmdDb25kaXRpb25zIiwicGF0dGVybnMiLCJzZW5kIl0sInNvdXJjZXMiOlsiLi4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsaXN0RXhwcmVzc0VuZHBvaW50cyBmcm9tICdleHByZXNzLWxpc3QtZW5kcG9pbnRzJztcbmNvbnN0IEVORF9QT0lOVFNfQVBJX1JPVVRFID0gJ19zcGVjbWF0aWMvZW5kcG9pbnRzJztcblxuZXhwb3J0IGNvbnN0IGVuYWJsZUFwaUNvdmVyYWdlID0gKGV4cHJlc3NBcHA6IGFueSkgPT4ge1xuICAgIHByb2Nlc3MuZW52WydlbmRwb2ludHNBUEknXSA9IEVORF9QT0lOVFNfQVBJX1JPVVRFO1xuICAgIGFkZEVuZFBvaW50c1JvdXRlKGV4cHJlc3NBcHApO1xuICAgIGNvbnNvbGUubG9nKGBFbmRwb2ludHMgQVBJIHJlZ2lzdGVyZWQgYXQgJHtFTkRfUE9JTlRTX0FQSV9ST1VURX1gKTtcbn07XG5cbmNvbnN0IGxpc3RFbmRQb2ludHMgPSAoZXhwcmVzc0FwcDogYW55KTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmdbXSB9ID0+IHtcbiAgICBjb25zdCBkZXRhaWxzID0gbGlzdEV4cHJlc3NFbmRwb2ludHMoZXhwcmVzc0FwcCk7XG4gICAgbGV0IGVuZFBvaW50czogeyBba2V5OiBzdHJpbmddOiBzdHJpbmdbXSB9ID0ge307XG4gICAgZGV0YWlscy5tYXAoYXBpRGV0YWlsID0+IHtcbiAgICAgICAgZW5kUG9pbnRzW2FwaURldGFpbC5wYXRoXSA9IGFwaURldGFpbC5tZXRob2RzO1xuICAgIH0pO1xuICAgIGRlbGV0ZSBlbmRQb2ludHNbYC8ke0VORF9QT0lOVFNfQVBJX1JPVVRFfWBdO1xuICAgIHJldHVybiBlbmRQb2ludHM7XG59O1xuXG5jb25zdCBhZGRFbmRQb2ludHNSb3V0ZSA9IChleHByZXNzQXBwOiBhbnkpID0+IHtcbiAgICBleHByZXNzQXBwLmdldChgLyR7RU5EX1BPSU5UU19BUElfUk9VVEV9YCwgKF9yZXE6IGFueSwgcmVzOiBhbnkpID0+IHtcbiAgICAgICAgbGV0IGVuZFBvaW50cyA9IGxpc3RFbmRQb2ludHMoZXhwcmVzc0FwcCk7XG4gICAgICAgIGxldCBzcHJpbmdBY3R1YXRvclBheWxvYWQgPSB7XG4gICAgICAgICAgICBjb250ZXh0czoge1xuICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIG1hcHBpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaGVyU2VydmxldHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaGVyU2VydmxldDogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICBPYmplY3Qua2V5cyhlbmRQb2ludHMpXG4gICAgICAgICAgICAuc29ydCgpXG4gICAgICAgICAgICAubWFwKHBhdGggPT4ge1xuICAgICAgICAgICAgICAgIHNwcmluZ0FjdHVhdG9yUGF5bG9hZC5jb250ZXh0cy5hcHBsaWNhdGlvbi5tYXBwaW5ncy5kaXNwYXRjaGVyU2VydmxldHMuZGlzcGF0Y2hlclNlcnZsZXQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RNYXBwaW5nQ29uZGl0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZHM6IGVuZFBvaW50c1twYXRoXS5zb3J0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybnM6IFtwYXRoXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSBhcyBuZXZlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgcmVzLnNlbmQoc3ByaW5nQWN0dWF0b3JQYXlsb2FkKTtcbiAgICB9KTtcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLHFCQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFBMEQsU0FBQUQsdUJBQUFFLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxnQkFBQUEsR0FBQTtBQUMxRCxJQUFNRSxvQkFBb0IsR0FBRyxzQkFBc0I7QUFFNUMsSUFBTUMsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFpQkEsQ0FBSUMsVUFBZSxFQUFLO0VBQ2xEQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBR0osb0JBQW9CO0VBQ2xESyxpQkFBaUIsQ0FBQ0gsVUFBVSxDQUFDO0VBQzdCSSxPQUFPLENBQUNDLEdBQUcsZ0NBQUFDLE1BQUEsQ0FBZ0NSLG9CQUFvQixDQUFFLENBQUM7QUFDdEUsQ0FBQztBQUFDUyxPQUFBLENBQUFSLGlCQUFBLEdBQUFBLGlCQUFBO0FBRUYsSUFBTVMsYUFBYSxHQUFHLFNBQWhCQSxhQUFhQSxDQUFJUixVQUFlLEVBQWtDO0VBQ3BFLElBQU1TLE9BQU8sR0FBRyxJQUFBQyxnQ0FBb0IsRUFBQ1YsVUFBVSxDQUFDO0VBQ2hELElBQUlXLFNBQXNDLEdBQUcsQ0FBQyxDQUFDO0VBQy9DRixPQUFPLENBQUNHLEdBQUcsQ0FBQyxVQUFBQyxTQUFTLEVBQUk7SUFDckJGLFNBQVMsQ0FBQ0UsU0FBUyxDQUFDQyxJQUFJLENBQUMsR0FBR0QsU0FBUyxDQUFDRSxPQUFPO0VBQ2pELENBQUMsQ0FBQztFQUNGLE9BQU9KLFNBQVMsS0FBQUwsTUFBQSxDQUFLUixvQkFBb0IsRUFBRztFQUM1QyxPQUFPYSxTQUFTO0FBQ3BCLENBQUM7QUFFRCxJQUFNUixpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQWlCQSxDQUFJSCxVQUFlLEVBQUs7RUFDM0NBLFVBQVUsQ0FBQ2dCLEdBQUcsS0FBQVYsTUFBQSxDQUFLUixvQkFBb0IsR0FBSSxVQUFDbUIsSUFBUyxFQUFFQyxHQUFRLEVBQUs7SUFDaEUsSUFBSVAsU0FBUyxHQUFHSCxhQUFhLENBQUNSLFVBQVUsQ0FBQztJQUN6QyxJQUFJbUIscUJBQXFCLEdBQUc7TUFDeEJDLFFBQVEsRUFBRTtRQUNOQyxXQUFXLEVBQUU7VUFDVEMsUUFBUSxFQUFFO1lBQ05DLGtCQUFrQixFQUFFO2NBQ2hCQyxpQkFBaUIsRUFBRTtZQUN2QjtVQUNKO1FBQ0o7TUFDSjtJQUNKLENBQUM7SUFDREMsTUFBTSxDQUFDQyxJQUFJLENBQUNmLFNBQVMsQ0FBQyxDQUNqQmdCLElBQUksQ0FBQyxDQUFDLENBQ05mLEdBQUcsQ0FBQyxVQUFBRSxJQUFJLEVBQUk7TUFDVEsscUJBQXFCLENBQUNDLFFBQVEsQ0FBQ0MsV0FBVyxDQUFDQyxRQUFRLENBQUNDLGtCQUFrQixDQUFDQyxpQkFBaUIsQ0FBQ0ksSUFBSSxDQUFDO1FBQzFGbkIsT0FBTyxFQUFFO1VBQ0xvQix3QkFBd0IsRUFBRTtZQUN0QmQsT0FBTyxFQUFFSixTQUFTLENBQUNHLElBQUksQ0FBQyxDQUFDYSxJQUFJLENBQUMsQ0FBQztZQUMvQkcsUUFBUSxFQUFFLENBQUNoQixJQUFJO1VBQ25CO1FBQ0o7TUFDSixDQUFVLENBQUM7SUFDZixDQUFDLENBQUM7SUFDTkksR0FBRyxDQUFDYSxJQUFJLENBQUNaLHFCQUFxQixDQUFDO0VBQ25DLENBQUMsQ0FBQztBQUNOLENBQUMifQ==