"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enableApiCoverage = void 0;
var _expressListEndpoints = _interopRequireDefault(require("express-list-endpoints"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var END_POINTS_API_ROUTE = '_specmatic/endpoints';
var enableApiCoverage = function enableApiCoverage(expressApp) {
  if (process.env.NODE_ENV !== 'test') return;
  process.env['endpointsAPI'] = END_POINTS_API_ROUTE;
  addEndPointsRoute(expressApp);
  // console.log(`Endpoints API registered at ${END_POINTS_API_ROUTE}`);
};
exports.enableApiCoverage = enableApiCoverage;
var listEndPoints = function listEndPoints(expressApp) {
  var details = (0, _expressListEndpoints["default"])(expressApp);
  var endPoints = {};
  details.map(function (apiDetail) {
    endPoints[apiDetail.path] = apiDetail.methods;
  });
  delete endPoints["/".concat(END_POINTS_API_ROUTE)];
  delete endPoints['*'];
  return endPoints;
};
var addEndPointsRoute = function addEndPointsRoute(expressApp) {
  expressApp.get("/".concat(END_POINTS_API_ROUTE), function (_req, res) {
    var endPoints = listEndPoints(expressApp);
    var springActuatorPayload = {
      contexts: {
        application: {
          mappings: {
            dispatcherServlets: {
              dispatcherServlet: []
            }
          }
        }
      }
    };
    Object.keys(endPoints).sort().map(function (path) {
      springActuatorPayload.contexts.application.mappings.dispatcherServlets.dispatcherServlet.push({
        details: {
          requestMappingConditions: {
            methods: endPoints[path].sort(),
            patterns: [path]
          }
        }
      });
    });
    res.send(springActuatorPayload);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzc0xpc3RFbmRwb2ludHMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJFTkRfUE9JTlRTX0FQSV9ST1VURSIsImVuYWJsZUFwaUNvdmVyYWdlIiwiZXhwcmVzc0FwcCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImFkZEVuZFBvaW50c1JvdXRlIiwiZXhwb3J0cyIsImxpc3RFbmRQb2ludHMiLCJkZXRhaWxzIiwibGlzdEV4cHJlc3NFbmRwb2ludHMiLCJlbmRQb2ludHMiLCJtYXAiLCJhcGlEZXRhaWwiLCJwYXRoIiwibWV0aG9kcyIsImNvbmNhdCIsImdldCIsIl9yZXEiLCJyZXMiLCJzcHJpbmdBY3R1YXRvclBheWxvYWQiLCJjb250ZXh0cyIsImFwcGxpY2F0aW9uIiwibWFwcGluZ3MiLCJkaXNwYXRjaGVyU2VydmxldHMiLCJkaXNwYXRjaGVyU2VydmxldCIsIk9iamVjdCIsImtleXMiLCJzb3J0IiwicHVzaCIsInJlcXVlc3RNYXBwaW5nQ29uZGl0aW9ucyIsInBhdHRlcm5zIiwic2VuZCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbGlzdEV4cHJlc3NFbmRwb2ludHMgZnJvbSAnZXhwcmVzcy1saXN0LWVuZHBvaW50cyc7XG5jb25zdCBFTkRfUE9JTlRTX0FQSV9ST1VURSA9ICdfc3BlY21hdGljL2VuZHBvaW50cyc7XG5cbmV4cG9ydCBjb25zdCBlbmFibGVBcGlDb3ZlcmFnZSA9IChleHByZXNzQXBwOiBhbnkpID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JykgcmV0dXJuO1xuICAgIHByb2Nlc3MuZW52WydlbmRwb2ludHNBUEknXSA9IEVORF9QT0lOVFNfQVBJX1JPVVRFO1xuICAgIGFkZEVuZFBvaW50c1JvdXRlKGV4cHJlc3NBcHApO1xuICAgIC8vIGNvbnNvbGUubG9nKGBFbmRwb2ludHMgQVBJIHJlZ2lzdGVyZWQgYXQgJHtFTkRfUE9JTlRTX0FQSV9ST1VURX1gKTtcbn07XG5cbmNvbnN0IGxpc3RFbmRQb2ludHMgPSAoZXhwcmVzc0FwcDogYW55KTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmdbXSB9ID0+IHtcbiAgICBjb25zdCBkZXRhaWxzID0gbGlzdEV4cHJlc3NFbmRwb2ludHMoZXhwcmVzc0FwcCk7XG4gICAgbGV0IGVuZFBvaW50czogeyBba2V5OiBzdHJpbmddOiBzdHJpbmdbXSB9ID0ge307XG4gICAgZGV0YWlscy5tYXAoYXBpRGV0YWlsID0+IHtcbiAgICAgICAgZW5kUG9pbnRzW2FwaURldGFpbC5wYXRoXSA9IGFwaURldGFpbC5tZXRob2RzO1xuICAgIH0pO1xuICAgIGRlbGV0ZSBlbmRQb2ludHNbYC8ke0VORF9QT0lOVFNfQVBJX1JPVVRFfWBdO1xuICAgIGRlbGV0ZSBlbmRQb2ludHNbJyonXTtcbiAgICByZXR1cm4gZW5kUG9pbnRzO1xufTtcblxuY29uc3QgYWRkRW5kUG9pbnRzUm91dGUgPSAoZXhwcmVzc0FwcDogYW55KSA9PiB7XG4gICAgZXhwcmVzc0FwcC5nZXQoYC8ke0VORF9QT0lOVFNfQVBJX1JPVVRFfWAsIChfcmVxOiBhbnksIHJlczogYW55KSA9PiB7XG4gICAgICAgIGxldCBlbmRQb2ludHMgPSBsaXN0RW5kUG9pbnRzKGV4cHJlc3NBcHApO1xuICAgICAgICBsZXQgc3ByaW5nQWN0dWF0b3JQYXlsb2FkID0ge1xuICAgICAgICAgICAgY29udGV4dHM6IHtcbiAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBtYXBwaW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hlclNlcnZsZXRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hlclNlcnZsZXQ6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgT2JqZWN0LmtleXMoZW5kUG9pbnRzKVxuICAgICAgICAgICAgLnNvcnQoKVxuICAgICAgICAgICAgLm1hcChwYXRoID0+IHtcbiAgICAgICAgICAgICAgICBzcHJpbmdBY3R1YXRvclBheWxvYWQuY29udGV4dHMuYXBwbGljYXRpb24ubWFwcGluZ3MuZGlzcGF0Y2hlclNlcnZsZXRzLmRpc3BhdGNoZXJTZXJ2bGV0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0TWFwcGluZ0NvbmRpdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RzOiBlbmRQb2ludHNbcGF0aF0uc29ydCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm5zOiBbcGF0aF0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0gYXMgbmV2ZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHJlcy5zZW5kKHNwcmluZ0FjdHVhdG9yUGF5bG9hZCk7XG4gICAgfSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxxQkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQTBELFNBQUFELHVCQUFBRSxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsZ0JBQUFBLEdBQUE7QUFDMUQsSUFBTUUsb0JBQW9CLEdBQUcsc0JBQXNCO0FBRTVDLElBQU1DLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBaUJBLENBQUlDLFVBQWUsRUFBSztFQUNsRCxJQUFJQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsUUFBUSxLQUFLLE1BQU0sRUFBRTtFQUNyQ0YsT0FBTyxDQUFDQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUdKLG9CQUFvQjtFQUNsRE0saUJBQWlCLENBQUNKLFVBQVUsQ0FBQztFQUM3QjtBQUNKLENBQUM7QUFBQ0ssT0FBQSxDQUFBTixpQkFBQSxHQUFBQSxpQkFBQTtBQUVGLElBQU1PLGFBQWEsR0FBRyxTQUFoQkEsYUFBYUEsQ0FBSU4sVUFBZSxFQUFrQztFQUNwRSxJQUFNTyxPQUFPLEdBQUcsSUFBQUMsZ0NBQW9CLEVBQUNSLFVBQVUsQ0FBQztFQUNoRCxJQUFJUyxTQUFzQyxHQUFHLENBQUMsQ0FBQztFQUMvQ0YsT0FBTyxDQUFDRyxHQUFHLENBQUMsVUFBQUMsU0FBUyxFQUFJO0lBQ3JCRixTQUFTLENBQUNFLFNBQVMsQ0FBQ0MsSUFBSSxDQUFDLEdBQUdELFNBQVMsQ0FBQ0UsT0FBTztFQUNqRCxDQUFDLENBQUM7RUFDRixPQUFPSixTQUFTLEtBQUFLLE1BQUEsQ0FBS2hCLG9CQUFvQixFQUFHO0VBQzVDLE9BQU9XLFNBQVMsQ0FBQyxHQUFHLENBQUM7RUFDckIsT0FBT0EsU0FBUztBQUNwQixDQUFDO0FBRUQsSUFBTUwsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFpQkEsQ0FBSUosVUFBZSxFQUFLO0VBQzNDQSxVQUFVLENBQUNlLEdBQUcsS0FBQUQsTUFBQSxDQUFLaEIsb0JBQW9CLEdBQUksVUFBQ2tCLElBQVMsRUFBRUMsR0FBUSxFQUFLO0lBQ2hFLElBQUlSLFNBQVMsR0FBR0gsYUFBYSxDQUFDTixVQUFVLENBQUM7SUFDekMsSUFBSWtCLHFCQUFxQixHQUFHO01BQ3hCQyxRQUFRLEVBQUU7UUFDTkMsV0FBVyxFQUFFO1VBQ1RDLFFBQVEsRUFBRTtZQUNOQyxrQkFBa0IsRUFBRTtjQUNoQkMsaUJBQWlCLEVBQUU7WUFDdkI7VUFDSjtRQUNKO01BQ0o7SUFDSixDQUFDO0lBQ0RDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDaEIsU0FBUyxDQUFDLENBQ2pCaUIsSUFBSSxDQUFDLENBQUMsQ0FDTmhCLEdBQUcsQ0FBQyxVQUFBRSxJQUFJLEVBQUk7TUFDVE0scUJBQXFCLENBQUNDLFFBQVEsQ0FBQ0MsV0FBVyxDQUFDQyxRQUFRLENBQUNDLGtCQUFrQixDQUFDQyxpQkFBaUIsQ0FBQ0ksSUFBSSxDQUFDO1FBQzFGcEIsT0FBTyxFQUFFO1VBQ0xxQix3QkFBd0IsRUFBRTtZQUN0QmYsT0FBTyxFQUFFSixTQUFTLENBQUNHLElBQUksQ0FBQyxDQUFDYyxJQUFJLENBQUMsQ0FBQztZQUMvQkcsUUFBUSxFQUFFLENBQUNqQixJQUFJO1VBQ25CO1FBQ0o7TUFDSixDQUFVLENBQUM7SUFDZixDQUFDLENBQUM7SUFDTkssR0FBRyxDQUFDYSxJQUFJLENBQUNaLHFCQUFxQixDQUFDO0VBQ25DLENBQUMsQ0FBQztBQUNOLENBQUMifQ==