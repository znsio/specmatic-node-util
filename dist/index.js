"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enableApiCoverage = void 0;
var _expressListEndpoints = _interopRequireDefault(require("express-list-endpoints"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var END_POINTS_API_ROUTE = '_specmatic/endpoints';
var enableApiCoverage = function enableApiCoverage(expressApp) {
  if (process.env.NODE_ENV !== 'test') return;
  process.env['endpointsAPI'] = END_POINTS_API_ROUTE;
  addEndPointsRoute(expressApp);
  console.log("Endpoints API registered at ".concat(END_POINTS_API_ROUTE));
};
exports.enableApiCoverage = enableApiCoverage;
var listEndPoints = function listEndPoints(expressApp) {
  var details = (0, _expressListEndpoints["default"])(expressApp);
  var endPoints = {};
  details.map(function (apiDetail) {
    endPoints[apiDetail.path] = apiDetail.methods;
  });
  delete endPoints["/".concat(END_POINTS_API_ROUTE)];
  return endPoints;
};
var addEndPointsRoute = function addEndPointsRoute(expressApp) {
  expressApp.get("/".concat(END_POINTS_API_ROUTE), function (_req, res) {
    var endPoints = listEndPoints(expressApp);
    var springActuatorPayload = {
      contexts: {
        application: {
          mappings: {
            dispatcherServlets: {
              dispatcherServlet: []
            }
          }
        }
      }
    };
    Object.keys(endPoints).sort().map(function (path) {
      springActuatorPayload.contexts.application.mappings.dispatcherServlets.dispatcherServlet.push({
        details: {
          requestMappingConditions: {
            methods: endPoints[path].sort(),
            patterns: [path]
          }
        }
      });
    });
    res.send(springActuatorPayload);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzc0xpc3RFbmRwb2ludHMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJFTkRfUE9JTlRTX0FQSV9ST1VURSIsImVuYWJsZUFwaUNvdmVyYWdlIiwiZXhwcmVzc0FwcCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImFkZEVuZFBvaW50c1JvdXRlIiwiY29uc29sZSIsImxvZyIsImNvbmNhdCIsImV4cG9ydHMiLCJsaXN0RW5kUG9pbnRzIiwiZGV0YWlscyIsImxpc3RFeHByZXNzRW5kcG9pbnRzIiwiZW5kUG9pbnRzIiwibWFwIiwiYXBpRGV0YWlsIiwicGF0aCIsIm1ldGhvZHMiLCJnZXQiLCJfcmVxIiwicmVzIiwic3ByaW5nQWN0dWF0b3JQYXlsb2FkIiwiY29udGV4dHMiLCJhcHBsaWNhdGlvbiIsIm1hcHBpbmdzIiwiZGlzcGF0Y2hlclNlcnZsZXRzIiwiZGlzcGF0Y2hlclNlcnZsZXQiLCJPYmplY3QiLCJrZXlzIiwic29ydCIsInB1c2giLCJyZXF1ZXN0TWFwcGluZ0NvbmRpdGlvbnMiLCJwYXR0ZXJucyIsInNlbmQiXSwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxpc3RFeHByZXNzRW5kcG9pbnRzIGZyb20gJ2V4cHJlc3MtbGlzdC1lbmRwb2ludHMnO1xuY29uc3QgRU5EX1BPSU5UU19BUElfUk9VVEUgPSAnX3NwZWNtYXRpYy9lbmRwb2ludHMnO1xuXG5leHBvcnQgY29uc3QgZW5hYmxlQXBpQ292ZXJhZ2UgPSAoZXhwcmVzc0FwcDogYW55KSA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcpIHJldHVybjtcbiAgICBwcm9jZXNzLmVudlsnZW5kcG9pbnRzQVBJJ10gPSBFTkRfUE9JTlRTX0FQSV9ST1VURTtcbiAgICBhZGRFbmRQb2ludHNSb3V0ZShleHByZXNzQXBwKTtcbiAgICBjb25zb2xlLmxvZyhgRW5kcG9pbnRzIEFQSSByZWdpc3RlcmVkIGF0ICR7RU5EX1BPSU5UU19BUElfUk9VVEV9YCk7XG59O1xuXG5jb25zdCBsaXN0RW5kUG9pbnRzID0gKGV4cHJlc3NBcHA6IGFueSk6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nW10gfSA9PiB7XG4gICAgY29uc3QgZGV0YWlscyA9IGxpc3RFeHByZXNzRW5kcG9pbnRzKGV4cHJlc3NBcHApO1xuICAgIGxldCBlbmRQb2ludHM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nW10gfSA9IHt9O1xuICAgIGRldGFpbHMubWFwKGFwaURldGFpbCA9PiB7XG4gICAgICAgIGVuZFBvaW50c1thcGlEZXRhaWwucGF0aF0gPSBhcGlEZXRhaWwubWV0aG9kcztcbiAgICB9KTtcbiAgICBkZWxldGUgZW5kUG9pbnRzW2AvJHtFTkRfUE9JTlRTX0FQSV9ST1VURX1gXTtcbiAgICByZXR1cm4gZW5kUG9pbnRzO1xufTtcblxuY29uc3QgYWRkRW5kUG9pbnRzUm91dGUgPSAoZXhwcmVzc0FwcDogYW55KSA9PiB7XG4gICAgZXhwcmVzc0FwcC5nZXQoYC8ke0VORF9QT0lOVFNfQVBJX1JPVVRFfWAsIChfcmVxOiBhbnksIHJlczogYW55KSA9PiB7XG4gICAgICAgIGxldCBlbmRQb2ludHMgPSBsaXN0RW5kUG9pbnRzKGV4cHJlc3NBcHApO1xuICAgICAgICBsZXQgc3ByaW5nQWN0dWF0b3JQYXlsb2FkID0ge1xuICAgICAgICAgICAgY29udGV4dHM6IHtcbiAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBtYXBwaW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hlclNlcnZsZXRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hlclNlcnZsZXQ6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgT2JqZWN0LmtleXMoZW5kUG9pbnRzKVxuICAgICAgICAgICAgLnNvcnQoKVxuICAgICAgICAgICAgLm1hcChwYXRoID0+IHtcbiAgICAgICAgICAgICAgICBzcHJpbmdBY3R1YXRvclBheWxvYWQuY29udGV4dHMuYXBwbGljYXRpb24ubWFwcGluZ3MuZGlzcGF0Y2hlclNlcnZsZXRzLmRpc3BhdGNoZXJTZXJ2bGV0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0TWFwcGluZ0NvbmRpdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RzOiBlbmRQb2ludHNbcGF0aF0uc29ydCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm5zOiBbcGF0aF0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0gYXMgbmV2ZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHJlcy5zZW5kKHNwcmluZ0FjdHVhdG9yUGF5bG9hZCk7XG4gICAgfSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxxQkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQTBELFNBQUFELHVCQUFBRSxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsZ0JBQUFBLEdBQUE7QUFDMUQsSUFBTUUsb0JBQW9CLEdBQUcsc0JBQXNCO0FBRTVDLElBQU1DLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBaUJBLENBQUlDLFVBQWUsRUFBSztFQUNsRCxJQUFJQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsUUFBUSxLQUFLLE1BQU0sRUFBRTtFQUNyQ0YsT0FBTyxDQUFDQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUdKLG9CQUFvQjtFQUNsRE0saUJBQWlCLENBQUNKLFVBQVUsQ0FBQztFQUM3QkssT0FBTyxDQUFDQyxHQUFHLGdDQUFBQyxNQUFBLENBQWdDVCxvQkFBb0IsQ0FBRSxDQUFDO0FBQ3RFLENBQUM7QUFBQ1UsT0FBQSxDQUFBVCxpQkFBQSxHQUFBQSxpQkFBQTtBQUVGLElBQU1VLGFBQWEsR0FBRyxTQUFoQkEsYUFBYUEsQ0FBSVQsVUFBZSxFQUFrQztFQUNwRSxJQUFNVSxPQUFPLEdBQUcsSUFBQUMsZ0NBQW9CLEVBQUNYLFVBQVUsQ0FBQztFQUNoRCxJQUFJWSxTQUFzQyxHQUFHLENBQUMsQ0FBQztFQUMvQ0YsT0FBTyxDQUFDRyxHQUFHLENBQUMsVUFBQUMsU0FBUyxFQUFJO0lBQ3JCRixTQUFTLENBQUNFLFNBQVMsQ0FBQ0MsSUFBSSxDQUFDLEdBQUdELFNBQVMsQ0FBQ0UsT0FBTztFQUNqRCxDQUFDLENBQUM7RUFDRixPQUFPSixTQUFTLEtBQUFMLE1BQUEsQ0FBS1Qsb0JBQW9CLEVBQUc7RUFDNUMsT0FBT2MsU0FBUztBQUNwQixDQUFDO0FBRUQsSUFBTVIsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFpQkEsQ0FBSUosVUFBZSxFQUFLO0VBQzNDQSxVQUFVLENBQUNpQixHQUFHLEtBQUFWLE1BQUEsQ0FBS1Qsb0JBQW9CLEdBQUksVUFBQ29CLElBQVMsRUFBRUMsR0FBUSxFQUFLO0lBQ2hFLElBQUlQLFNBQVMsR0FBR0gsYUFBYSxDQUFDVCxVQUFVLENBQUM7SUFDekMsSUFBSW9CLHFCQUFxQixHQUFHO01BQ3hCQyxRQUFRLEVBQUU7UUFDTkMsV0FBVyxFQUFFO1VBQ1RDLFFBQVEsRUFBRTtZQUNOQyxrQkFBa0IsRUFBRTtjQUNoQkMsaUJBQWlCLEVBQUU7WUFDdkI7VUFDSjtRQUNKO01BQ0o7SUFDSixDQUFDO0lBQ0RDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDZixTQUFTLENBQUMsQ0FDakJnQixJQUFJLENBQUMsQ0FBQyxDQUNOZixHQUFHLENBQUMsVUFBQUUsSUFBSSxFQUFJO01BQ1RLLHFCQUFxQixDQUFDQyxRQUFRLENBQUNDLFdBQVcsQ0FBQ0MsUUFBUSxDQUFDQyxrQkFBa0IsQ0FBQ0MsaUJBQWlCLENBQUNJLElBQUksQ0FBQztRQUMxRm5CLE9BQU8sRUFBRTtVQUNMb0Isd0JBQXdCLEVBQUU7WUFDdEJkLE9BQU8sRUFBRUosU0FBUyxDQUFDRyxJQUFJLENBQUMsQ0FBQ2EsSUFBSSxDQUFDLENBQUM7WUFDL0JHLFFBQVEsRUFBRSxDQUFDaEIsSUFBSTtVQUNuQjtRQUNKO01BQ0osQ0FBVSxDQUFDO0lBQ2YsQ0FBQyxDQUFDO0lBQ05JLEdBQUcsQ0FBQ2EsSUFBSSxDQUFDWixxQkFBcUIsQ0FBQztFQUNuQyxDQUFDLENBQUM7QUFDTixDQUFDIn0=